name: Update README with Neofetch

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'
  push:
    branches:
      - main

jobs:
  update_readme:
    name: Update README with Neofetch Output
    runs-on: ubuntu-latest

    container:
      image: archlinux:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update pacman and install dependencies
        run: |
          echo "Updating pacman and installing dependencies..."
          # Gunakan -Syyu untuk memaksa refresh semua database paket
          pacman -Syyu --noconfirm
          # Sekarang coba instal paketnya
          pacman -S --noconfirm neofetch curl python

      - name: Run neofetch and capture output
        id: neofetch_step
        run: |
          echo "Running neofetch..."
          NEOFETCH_OUTPUT=$(neofetch --stdout --color_blocks off)
          echo "neofetch_content<<EOF" >> $GITHUB_OUTPUT
          echo "$NEOFETCH_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update README.md with neofetch output
        run: |
          cat << 'EOS' > update_script.py
          import os
          import re

          readme_file = "README.md"
          neofetch_data = os.environ.get("NEOFETCH_CONTENT", "Error: Neofetch data not found")
          formatted_neofetch = f"```text\n{neofetch_data.strip()}\n```"
          start_marker = "<!-- START_SECTION:neofetch -->"
          end_marker = "<!-- END_SECTION:neofetch -->"

          try:
              with open(readme_file, "r", encoding="utf-8") as f:
                  content = f.read()
          except FileNotFoundError:
              print(f"Error: {readme_file} not found.")
              exit(1)

          if start_marker not in content or end_marker not in content:
              print(f"Error: Markers '{start_marker}' and '{end_marker}' not found in {readme_file}.")
              # exit(1) # Opsional: hentikan jika marker tidak ada

          new_content, num_replacements = re.subn(
              f"({re.escape(start_marker)}\\s*\\n).*?(\\n\\s*{re.escape(end_marker)})",
              f"\\1{formatted_neofetch}\\2",
              content,
              flags=re.DOTALL,
              count=1
          )

          if num_replacements > 0:
              with open(readme_file, "w", encoding="utf-8") as f:
                  f.write(new_content)
              print("README.md updated successfully with neofetch output.")
          elif start_marker in content and end_marker in content:
              print("Content between markers not replaced. Check regex or if content is already up-to-date.")
          EOS

          NEOFETCH_CONTENT="${{ steps.neofetch_step.outputs.neofetch_content }}" python update_script.py
        env:
          NEOFETCH_CONTENT: ${{ steps.neofetch_step.outputs.neofetch_content }}

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: auto-update README with neofetch output [skip ci]"
          file_pattern: README.md
